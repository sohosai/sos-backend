openapi: 3.0.0
info:
  title: sos21-api-server
  version: 0.3.0
  contact:
    name: coord_e
    email: me@coord-e.com
  description: |
    RPC-style HTTP API server for SOS21.
    We use only `GET` and `POST` methods in our API, for immutable and mutable endpoints respectively.
servers:
  - url: "http://localhost:3000"
    description: Local server
  - url: "http://localhost:4010"
    description: Local server (with validation proxy)
  - url: "https://online-api-nightly.sohosai.com"
    description: Nightly depolyment
  - url: "https://online-api-beta.sohosai.com"
    description: Beta depolyment
paths:
  /me/get:
    get:
      summary: me/get
      tags:
        - me
        - user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: ./model/user/User.yml
                required:
                  - user
              examples: {}
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: me/get
      description: ログインしているユーザーの情報を返します。
      parameters: []
  /signup:
    post:
      summary: signup
      tags:
        - me
        - user
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: ./model/user/User.yml
                required:
                  - user
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 400
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                              - field
                            properties:
                              type:
                                type: string
                                enum:
                                  - INVALID_FIELD
                              field:
                                type: string
                    required:
                      - status
                      - error
              examples: {}
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 409
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - ALREADY_SIGNED_UP
                    required:
                      - status
                      - error
              examples:
                Already signed up:
                  value:
                    status: 409
                    error:
                      type: API
                      info:
                        type: ALREADY_SIGNED_UP
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: ./model/user/UserName.yml
                kana_name:
                  $ref: ./model/user/UserKanaName.yml
                phone_number:
                  type: string
                affiliation:
                  type: string
                category:
                  $ref: ./model/user/UserCategory.yml
              required:
                - name
                - kana_name
                - phone_number
                - affiliation
                - category
      description: ユーザー情報を登録します。
  /user/list:
    get:
      summary: user/list
      tags:
        - user
        - committee
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: ./model/user/User.yml
                required:
                  - users
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: user/list
      description: ユーザ一覧を返します。
    parameters: []
  /user/export:
    get:
      summary: user/export
      tags:
        - user
        - committee
      responses:
        "200":
          description: OK
          content:
            text/csv:
              schema:
                type: string
                description: カンマ区切り、CRLF 改行の CSV
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: user/export
      parameters:
        - schema:
            type: string
            example: 内部ID
          in: query
          name: field_id
          description: 与えられた場合、その名前の列でユーザーの ID を出力します。
        - schema:
            type: string
            example: 登録日時
          in: query
          name: field_created_at
          description: 与えられた場合、その名前の列でユーザーの作成日時を出力します。
        - schema:
            type: string
            example: 名
          in: query
          name: field_first_name
          description: 与えられた場合、その名前の列でユーザーの下の名前を出力します。
        - schema:
            type: string
            example: 姓
          in: query
          name: field_last_name
          description: 与えられた場合、その名前の列でユーザーの上の名前を出力します。
        - schema:
            type: string
            example: 名前
          in: query
          name: field_full_name
          description: 与えられた場合、その名前の列でユーザーのフルネームを出力します。
        - schema:
            type: string
            example: 名（よみがな）
          in: query
          name: field_kana_first_name
          description: 与えられた場合、その名前の列でユーザーの下の名前のよみがなを出力します。
        - schema:
            type: string
            example: 姓（よみがな）
          in: query
          name: field_kana_last_name
          description: 与えられた場合、その名前の列でユーザーの上の名前のよみがなを出力します。
        - schema:
            type: string
            example: 名前（よみがな）
          in: query
          name: field_kana_full_name
          description: 与えられた場合、その名前の列でユーザーのフルネームのよみがなを出力します。
        - schema:
            type: string
            example: メールアドレス
          in: query
          name: field_email
          description: 与えられた場合、その名前の列でユーザーのメールアドレスを出力します。
        - schema:
            type: string
            example: 電話番号
          in: query
          name: field_phone_number
          description: 与えられた場合、その名前の列でユーザーの電話番号を出力します。
        - schema:
            type: string
            example: 所属
          in: query
          name: field_affiliation
          description: 与えられた場合、その名前の列でユーザーの所属を出力します。
        - schema:
            type: string
            example: 権限
          in: query
          name: field_role
          description: 与えられた場合、その名前の列でユーザーのロールを出力します。
        - schema:
            type: string
            example: 区分
          in: query
          name: field_category
          description: 与えられた場合、その名前の列でユーザーの区分を出力します。
        - schema:
            type: string
            example: 管理者
          in: query
          name: role_administrator
          required: true
          description: "`administrator` ロールをどう表示するか指定します。"
        - schema:
            type: string
            example: 実委人（権限あり）
          in: query
          name: role_committee_operator
          required: true
          description: "`committee_operator` ロールをどう表示するか指定します。"
        - schema:
            type: string
            example: 実委人
          in: query
          name: role_committee
          required: true
          description: "`committee` ロールをどう表示するか指定します。"
        - schema:
            type: string
            example: 企画者
          in: query
          name: role_general
          required: true
          description: "`general` ロールをどう表示するか指定します。"
        - schema:
            type: string
            example: 学部生
          in: query
          name: category_undergraduate_student
          required: true
          description: "`undergraduate_student` ユーザー区分をどう表示するか指定します。"
        - schema:
            type: string
            example: 院生
          in: query
          name: category_graduate_student
          required: true
          description: "`graduate_student` ユーザー区分をどう表示するか指定します。"
        - schema:
            type: string
            example: 学部生
          in: query
          name: category_academic_staff
          required: true
          description: "`academic_staff` ユーザー区分をどう表示するか指定します。"
      description: ユーザ一覧を CSV で出力します。
    parameters: []
  /user/get:
    get:
      summary: user/get
      tags:
        - user
        - committee
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: ./model/user/User.yml
                required:
                  - user
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/UserNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: user/get
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: user_id
          required: true
      description: 指定されたユーザーの情報を返します。
    parameters: []
  /me/project/list:
    get:
      summary: me/project/list
      tags:
        - me
        - project
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: ./model/project/Project.yml
                required:
                  - projects
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: me/project/list
      description: ログインしているユーザーの企画一覧を返します。
    parameters: []
  /me/pending-project/list:
    get:
      summary: me/pending-project/list
      tags:
        - me
        - pending_project
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pending_projects:
                    type: array
                    items:
                      $ref: ./model/pending_project/PendingProject.yml
                required:
                  - pending_projects
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: me/pending-project/list
      description: ログインしているユーザーの承認待ち企画一覧を返します。
    parameters: []
  /me/file/list:
    get:
      summary: me/file/list
      tags:
        - me
        - file
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      $ref: ./model/file/File.yml
                required:
                  - files
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: me/file/list
      description: ログインしているユーザーのファイル一覧を返します。
    parameters: []
  /me/file/check-usage:
    get:
      summary: me/file/check-usage
      tags:
        - me
        - file
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  usage:
                    type: integer
                  quota:
                    type: integer
                    nullable: true
                required:
                  - usage
                  - quota
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: me/file/check-usage
      description: ログインしているユーザーのファイルの利用状況を返します。
    parameters: []
  /me/file-sharing/list:
    get:
      summary: me/file-sharing/list
      tags:
        - me
        - file
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  sharings:
                    type: array
                    items:
                      $ref: ./model/file_sharing/FileSharing.yml
                required:
                  - sharings
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: me/file-sharing/list
      parameters: []
      description: ログインしているユーザーのファイル共有の一覧を返します。
  /project/prepare:
    post:
      summary: project/prepare
      operationId: project/prepare
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  pending_project:
                    $ref: ./model/pending_project/PendingProject.yml
                required:
                  - pending_project
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 400
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            oneOf:
                              - properties:
                                  type:
                                    type: string
                                    enum:
                                      - INVALID_FIELD
                                  field:
                                    type: string
                                required:
                                  - type
                                  - field
                              - properties:
                                  type:
                                    type: string
                                    enum:
                                      - DUPLICATED_PROJECT_ATTRIBUTES
                                required:
                                  - type
                            type: object
                    required:
                      - status
                      - error
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      description: 承認待ち企画を作成します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                kana_name:
                  type: string
                group_name:
                  type: string
                kana_group_name:
                  type: string
                description:
                  type: string
                category:
                  $ref: ./model/project/ProjectCategory.yml
                attributes:
                  type: array
                  items:
                    $ref: ./model/project/ProjectAttribute.yml
              required:
                - name
                - kana_name
                - group_name
                - kana_group_name
                - description
                - category
                - attributes
      tags:
        - project
    parameters: []
  /pending-project/get:
    get:
      summary: pending-project/get
      tags:
        - pending_project
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pending_project:
                    $ref: ./model/pending_project/PendingProject.yml
                required:
                  - pending_project
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/PendingProjectNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: pending-project/get
      description: 指定された承認待ち企画の情報を返します。
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: pending_project_id
    parameters: []
  /pending-project/accept-subowner:
    post:
      summary: pending-project/accept-subowner
      operationId: pending-project/accept-subowner
      tags:
        - project
        - pending_project
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: ./model/project/Project.yml
                required:
                  - project
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/PendingProjectNotFound"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 409
                      error:
                        required:
                          - type
                          - info
                        type: object
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - TOO_MANY_PROJECTS
                                  - NOT_ANSWERED_REGISTRATION_FORM
                    required:
                      - status
                      - error
        "500":
          $ref: "#/components/responses/InternalServerError"
      description: 指定された承認待ち企画の副責任者になることを承認し、企画を作成します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pending_project_id:
                  $ref: ./model/pending_project/PendingProjectId.yml
              required:
                - pending_project_id
    parameters: []
  /pending-project/registration-form/get:
    get:
      summary: pending-project/registration-form/get
      tags:
        - pending_project
        - registration_form
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  registration_form:
                    $ref: ./model/registration_form/RegistrationForm.yml
                required:
                  - registration_form
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Registration Form or Pending Project Not Found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 404
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - REGISTRATION_FORM_NOT_FOUND
                                  - PENDING_PROJECT_NOT_FOUND
                    required:
                      - status
                      - error
              examples:
                Example:
                  value:
                    status: 404
                    error:
                      type: API
                      info:
                        type: REGISTRATION_FORM_NOT_FOUND
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: pending-project/registration-form/get
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: pending_project_id
          required: true
        - schema:
            type: string
            format: uuid
          in: query
          name: registration_form_id
          required: true
      description: 指定された登録申請の情報を返します。
  /pending-project/registration-form/list:
    get:
      summary: pending-project/registration-form/list
      tags:
        - pending_project
        - registration_form
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  registration_forms:
                    type: array
                    items:
                      $ref: ./model/registration_form/RegistrationForm.yml
                required:
                  - registration_forms
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/PendingProjectNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: pending-project/registration-form/list
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: pending_project_id
          required: true
      description: 指定された企画向けの登録申請の一覧を返します。
  /pending-project/registration-form/answer:
    post:
      summary: pending-project/registration-form/answer
      operationId: pending-project/registration-form/answer
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    $ref: ./model/registration_form_answer/RegistrationFormAnswer.yml
                required:
                  - answer
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 400
                      error:
                        required:
                          - type
                          - info
                        type: object
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            oneOf:
                              - properties:
                                  type:
                                    type: string
                                    enum:
                                      - NO_FORM_ANSWER_ITEMS
                                      - TOO_MANY_FORM_ANSWER_ITEMS
                                      - MISMATCHED_FORM_ITEMS_LENGTH
                                required:
                                  - type
                              - properties:
                                  type:
                                    type: string
                                    enum:
                                      - INVALID_FORM_ANSWER_ITEM
                                  id:
                                    $ref: ./model/form/item/FormItemId.yml
                                required:
                                  - type
                                  - id
                              - properties:
                                  type:
                                    type: string
                                    enum:
                                      - MISMATCHED_FORM_ITEM_ID
                                  got:
                                    $ref: ./model/form/item/FormItemId.yml
                                  expected:
                                    $ref: ./model/form/item/FormItemId.yml
                                required:
                                  - type
                                  - got
                                  - expected
                            type: object
                    required:
                      - status
                      - error
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Registration Form or Pending Project Not Found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 404
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - REGISTRATION_FORM_NOT_FOUND
                                  - PENDING_PROJECT_NOT_FOUND
                    required:
                      - status
                      - error
              examples:
                Example:
                  value:
                    status: 404
                    error:
                      type: API
                      info:
                        type: REGISTRATION_FORM_NOT_FOUND
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 409
                      error:
                        required:
                          - type
                          - info
                        type: object
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - ALREADY_ANSWERED_REGISTRATION_FORM
                    required:
                      - status
                      - error
              examples:
                Already answered registration form:
                  value:
                    status: 409
                    error:
                      type: API
                      info:
                        type: ALREADY_ANSWERED_REGISTRATION_FORM
        "500":
          $ref: "#/components/responses/InternalServerError"
      description: 登録申請に回答します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pending_project_id:
                  $ref: ./model/pending_project/PendingProjectId.yml
                registration_form_id:
                  $ref: ./model/registration_form/RegistrationFormId.yml
                items:
                  type: array
                  items:
                    $ref: ./model/form_answer/RequestFormAnswerItem.yml
              required:
                - pending_project_id
                - registration_form_id
                - items
      tags:
        - registration_form
        - pending_project
        - registration_form_answer
  /pending-project/registration-form/answer/get:
    get:
      summary: pending-project/registration-form/answer/get
      tags:
        - registration_form
        - pending_project
        - registration_form_answer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    $ref: ./model/registration_form_answer/RegistrationFormAnswer.yml
                required:
                  - answer
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Registration Form, Pending Project, or the Answer Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 404
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - REGISTRATION_FORM_NOT_FOUND
                                  - PENDING_PROJECT_NOT_FOUND
                                  - REGISTRATION_FORM_ANSWER_NOT_FOUND
                    required:
                      - status
                      - error
              examples:
                Example:
                  value:
                    status: 404
                    error:
                      type: API
                      info:
                        type: REGISTRATION_FORM_NOT_FOUND
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: pending-project/registration-form/answer/get
      description: 登録申請の回答を返します。
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: pending_project_id
          required: true
        - schema:
            type: string
            format: uuid
          in: query
          name: registration_form_id
          required: true
  /project/get:
    get:
      summary: project/get
      tags:
        - project
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: ./model/project/Project.yml
                required:
                  - project
              examples: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 400
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            properties:
                              type:
                                type: string
                                enum:
                                  - INVALID_PROJECT_CODE
                            required:
                              - type
                    required:
                      - status
                      - error
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProjectNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: project/get
      description: ID か企画番号で指定された企画の情報を返します。
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: project_id
        - schema:
            type: string
          in: query
          name: project_code
    parameters: []
  /project/list:
    get:
      summary: project/list
      tags:
        - project
        - committee
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: ./model/project/Project.yml
                required:
                  - projects
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: project/list
      description: 企画一覧を返します。
    parameters: []
  /project/export:
    get:
      summary: project/export
      tags:
        - project
        - committee
      responses:
        "200":
          description: OK
          content:
            text/csv:
              schema:
                type: string
                description: カンマ区切り、CRLF 改行の CSV
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: project/export
      parameters:
        - schema:
            type: string
            example: 内部ID
          in: query
          name: field_id
          description: 与えられた場合、その名前の列で企画の ID を出力します。
        - schema:
            type: string
            example: 企画番号
          in: query
          name: field_code
          description: 与えられた場合、その名前の列で企画番号を出力します。
        - schema:
            type: string
            example: 作成日時
          in: query
          name: field_created_at
          description: 与えられた場合、その名前の列で企画の作成日時を出力します。
        - schema:
            type: string
            example: 企画責任者 内部ID
          in: query
          name: field_owner_id
          description: 与えられた場合、その名前の列で企画責任者の ID を出力します。
        - schema:
            type: string
            example: 企画責任者 名
          in: query
          name: field_owner_first_name
          description: 与えられた場合、その名前の列で企画責任者の下の名前を出力します。
        - schema:
            type: string
            example: 企画責任者 姓
          in: query
          name: field_owner_last_name
          description: 与えられた場合、その名前の列で企画責任者の上の名前を出力します。
        - schema:
            type: string
            example: 企画責任者
          in: query
          name: field_owner_full_name
          description: 与えられた場合、その名前の列で企画責任者のフルネームを出力します。
        - schema:
            type: string
            example: 企画責任者 名（よみがな）
          in: query
          name: field_owner_kana_first_name
          description: 与えられた場合、その名前の列で企画責任者の下の名前のよみがなを出力します。
        - schema:
            type: string
            example: 企画責任者 姓（よみがな）
          in: query
          name: field_owner_kana_last_name
          description: 与えられた場合、その名前の列で企画責任者の上の名前のよみがなを出力します。
        - schema:
            type: string
            example: 企画責任者（よみがな）
          in: query
          name: field_owner_kana_full_name
          description: 与えられた場合、その名前の列で企画責任者のフルネームのよみがなを出力します。
        - schema:
            type: string
            example: 企画副責任者 内部ID
          in: query
          name: field_subowner_id
          description: 与えられた場合、その名前の列で企画副責任者の ID を出力します。
        - schema:
            type: string
            example: 企画副責任者 名
          in: query
          name: field_subowner_first_name
          description: 与えられた場合、その名前の列で企画副責任者の下の名前を出力します。
        - schema:
            type: string
            example: 企画副責任者 姓
          in: query
          name: field_subowner_last_name
          description: 与えられた場合、その名前の列で企画副責任者の上の名前を出力します。
        - schema:
            type: string
            example: 企画副責任者
          in: query
          name: field_subowner_full_name
          description: 与えられた場合、その名前の列で企画副責任者のフルネームを出力します。
        - schema:
            type: string
            example: 企画副責任者 名（よみがな）
          in: query
          name: field_subowner_kana_first_name
          description: 与えられた場合、その名前の列で企画副責任者の下の名前のよみがなを出力します。
        - schema:
            type: string
            example: 企画副責任者 姓（よみがな）
          in: query
          name: field_subowner_kana_last_name
          description: 与えられた場合、その名前の列で企画副責任者の上の名前のよみがなを出力します。
        - schema:
            type: string
            example: 企画副責任者（よみがな）
          in: query
          name: field_subowner_kana_full_name
          description: 与えられた場合、その名前の列で企画副責任者のフルネームのよみがなを出力します。
        - schema:
            type: string
            example: 企画名
          in: query
          name: field_name
          description: 与えられた場合、その名前の列で企画名を出力します。
        - schema:
            type: string
            example: 企画名（よみがな）
          in: query
          name: field_kana_name
          description: 与えられた場合、その名前の列で企画名のよみがなを出力します。
        - schema:
            type: string
            example: 企画団体名
          in: query
          name: field_group_name
          description: 与えられた場合、その名前の列で企画団体名を出力します。
        - schema:
            type: string
            example: 企画団体名（よみがな）
          in: query
          name: field_kana_group_name
          description: 与えられた場合、その名前の列で企画団体名のよみがなを出力します。
        - schema:
            type: string
            example: 企画説明
          in: query
          name: field_description
          description: 与えられた場合、その名前の列で企画説明を出力します。
        - schema:
            type: string
            example: 企画形態
          in: query
          name: field_category
          description: 与えられた場合、その名前の列で企画形態を出力します。
        - schema:
            type: string
            example: 学術企画
          in: query
          name: field_attribute_academic
          description: 与えられた場合、その名前の列で企画が学術企画かどうかを出力します。
        - schema:
            type: string
            example: 芸術企画
          in: query
          name: field_attribute_artistic
          description: 与えられた場合、その名前の列で企画が芸術企画かどうかを出力します。
        - schema:
            type: string
            example: 委員会企画
          in: query
          name: field_attribute_committee
          description: 与えられた場合、その名前の列で企画が委員会企画かどうかを出力します。
        - schema:
            type: string
            example: 屋外企画
          in: query
          name: field_attribute_outdoor
          description: 与えられた場合、その名前の列で企画が屋外企画かどうかを出力します。
        - schema:
            type: string
            example: 一般
          in: query
          name: category_general
          description: "`general` 企画形態をどう表示するか指定します。"
          required: true
        - schema:
            type: string
            example: ステージ
          in: query
          description: "`stage` 企画形態をどう表示するか指定します。"
          name: category_stage
          required: true
        - schema:
            type: string
            example: 調理
          in: query
          description: "`cooking` 企画形態をどう表示するか指定します。"
          name: category_cooking
          required: true
        - schema:
            type: string
            example: 飲食物取扱
          in: query
          description: "`food` 企画形態をどう表示するか指定します。"
          name: category_food
          required: true
      description: 企画一覧を CSV で出力します。
    parameters: []
  /user/update:
    post:
      summary: user/update
      operationId: user/update
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: ./model/user/User.yml
                required:
                  - user
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/UserNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      tags:
        - user
        - admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref: ./model/user/UserId.yml
                name:
                  $ref: ./model/user/UserName.yml
                kana_name:
                  $ref: ./model/user/UserKanaName.yml
                phone_number:
                  type: string
                affiliation:
                  type: string
                role:
                  $ref: ./model/user/UserRole.yml
                category:
                  $ref: ./model/user/UserCategory.yml
              required:
                - id
      description: 指定されたユーザーの情報を更新します。
    parameters: []
  /project/update:
    post:
      summary: project/update
      operationId: project/update
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: ./model/project/Project.yml
                required:
                  - project
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProjectNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      description: 指定された企画の情報を更新します。
      tags:
        - project
        - admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref: ./model/project/ProjectId.yml
                name:
                  type: string
                kana_name:
                  type: string
                group_name:
                  type: string
                kana_group_name:
                  type: string
                description:
                  type: string
                category:
                  $ref: ./model/project/ProjectCategory.yml
                attributes:
                  type: array
                  items:
                    $ref: ./model/project/ProjectAttribute.yml
              required:
                - id
    parameters: []
  /project/form/get:
    get:
      summary: project/form/get
      tags:
        - project
        - form
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  form:
                    $ref: ./model/form/Form.yml
                required:
                  - form
              examples: {}
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Form or project Not Found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 404
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - FORM_NOT_FOUND
                                  - PROJECT_NOT_FOUND
                    required:
                      - status
                      - error
              examples:
                Example:
                  value:
                    status: 404
                    error:
                      type: API
                      info:
                        type: FORM_NOT_FOUND
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: project/form/get
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: project_id
          required: true
        - schema:
            type: string
            format: uuid
          in: query
          name: form_id
          required: true
      description: 指定された申請の情報を返します。
  /project/form/list:
    get:
      summary: project/form/list
      tags:
        - project
        - form
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  forms:
                    type: array
                    items:
                      $ref: ./model/form/Form.yml
                required:
                  - forms
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProjectNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: project/form/list
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: project_id
          required: true
      description: 指定された企画向けの申請の一覧を返します。
  /project/form/answer:
    post:
      summary: project/form/answer
      operationId: project/form/answer
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    $ref: ./model/form_answer/FormAnswer.yml
                required:
                  - answer
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 400
                      error:
                        required:
                          - type
                          - info
                        type: object
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            oneOf:
                              - properties:
                                  type:
                                    type: string
                                    enum:
                                      - OUT_OF_ANSWER_PERIOD
                                      - NO_FORM_ITEMS
                                      - TOO_MANY_FORM_ITEMS
                                      - MISMATCHED_FORM_ITEMS_LENGTH
                                required:
                                  - type
                              - properties:
                                  type:
                                    type: string
                                    enum:
                                      - INVALID_FORM_ITEM
                                      - INVALID_FORM_ANSWER
                                  id:
                                    $ref: ./model/form/item/FormItemId.yml
                                required:
                                  - type
                                  - id
                              - properties:
                                  type:
                                    type: string
                                    enum:
                                      - MISMATCHED_FORM_ITEM_ID
                                  got:
                                    $ref: ./model/form/item/FormItemId.yml
                                  expected:
                                    $ref: ./model/form/item/FormItemId.yml
                                required:
                                  - type
                                  - got
                                  - expected
                            type: object
                    required:
                      - status
                      - error
              examples:
                Out of answer period:
                  value:
                    status: 400
                    error:
                      type: API
                      info:
                        type: OUT_OF_ANSWER_PERIOD
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Form or project Not Found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 404
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - FORM_NOT_FOUND
                                  - PROJECT_NOT_FOUND
                    required:
                      - status
                      - error
              examples:
                Example:
                  value:
                    status: 404
                    error:
                      type: API
                      info:
                        type: FORM_NOT_FOUND
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 409
                      error:
                        required:
                          - type
                          - info
                        type: object
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - ALREADY_ANSWERED_FORM
                    required:
                      - status
                      - error
              examples:
                Already answered form:
                  value:
                    status: 409
                    error:
                      type: API
                      info:
                        type: ALREADY_ANSWERED_FORM
        "500":
          $ref: "#/components/responses/InternalServerError"
      description: 申請に回答します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  $ref: ./model/project/ProjectId.yml
                form_id:
                  $ref: ./model/form/FormId.yml
                items:
                  type: array
                  items:
                    $ref: ./model/form_answer/RequestFormAnswerItem.yml
              required:
                - project_id
                - form_id
                - items
      tags:
        - form
        - project
        - form_answer
  /project/form/answer/get:
    get:
      summary: project/form/answer/get
      tags:
        - form
        - project
        - form_answer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    $ref: ./model/form_answer/FormAnswer.yml
                required:
                  - answer
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Form, project, or the answer Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 404
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - FORM_NOT_FOUND
                                  - PROJECT_NOT_FOUND
                                  - FORM_ANSWER_NOT_FOUND
                    required:
                      - status
                      - error
              examples:
                Example:
                  value:
                    status: 404
                    error:
                      type: API
                      info:
                        type: FORM_NOT_FOUND
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: project/form/answer/get
      description: 申請の回答を返します。
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: project_id
          required: true
        - schema:
            type: string
            format: uuid
          in: query
          name: form_id
          required: true
  /project/form/answer/file-sharing/get-file:
    get:
      summary: project/form/answer/file-sharing/get-file
      tags:
        - project
        - form
        - form_answer
        - file
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "File Sharing, Project, Form or Form Answer Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 404
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - PROJECT_NOT_FOUND
                                  - FORM_NOT_FOUND
                                  - FORM_ANSWER_NOT_FOUND
                                  - FILE_SHARING_NOT_FOUND
                    required:
                      - status
                      - error
              examples:
                Example:
                  value:
                    status: 404
                    error:
                      type: API
                      info:
                        type: FILE_SHARING_NOT_FOUND
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: project/form/answer/file-sharing/get-file
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: sharing_id
          required: true
        - schema:
            type: string
            format: uuid
          in: query
          name: project_id
          required: true
        - schema:
            type: string
            format: uuid
          in: query
          name: form_id
          required: true
      description: 指定されたファイル共有で申請の回答に対して共有されているファイルを返します。
  /project/form/answer/file-sharing/get-file-info:
    get:
      summary: project/form/answer/file-sharing/get-file-info
      tags:
        - project
        - form
        - form_answer
        - file
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  file:
                    $ref: ./model/file/File.yml
                required:
                  - file
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "File Sharing, Project, Form or Form Answer Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 404
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - PROJECT_NOT_FOUND
                                  - FORM_NOT_FOUND
                                  - FORM_ANSWER_NOT_FOUND
                                  - FILE_SHARING_NOT_FOUND
                    required:
                      - status
                      - error
              examples:
                Example:
                  value:
                    status: 404
                    error:
                      type: API
                      info:
                        type: FILE_SHARING_NOT_FOUND
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: project/form/answer/file-sharing/get-file-info
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: sharing_id
          required: true
        - schema:
            type: string
            format: uuid
          in: query
          name: project_id
          required: true
        - schema:
            type: string
            format: uuid
          in: query
          name: form_id
          required: true
      description: 指定されたファイル共有で申請の回答に対して共有されているファイルの情報を返します。
  /project/file-distribution/get:
    get:
      summary: project/file-distribution/get
      tags:
        - project
        - file_distribution
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  distributed_file:
                    $ref: ./model/DistributedFile.yml
                required:
                  - distributed_file
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: File Distribution or Project Not Found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 404
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - FILE_DISTRIBUTION_NOT_FOUND
                                  - PROJECT_NOT_FOUND
                    required:
                      - status
                      - error
              examples:
                Example:
                  value:
                    status: 404
                    error:
                      type: API
                      info:
                        type: FILE_DISTRIBUTION_NOT_FOUND
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: project/file-distribution/get
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: project_id
          required: true
        - schema:
            type: string
            format: uuid
          in: query
          name: distribution_id
          required: true
      description: 企画の指定された配布ファイルの情報を返します。
  /project/file-distribution/list:
    get:
      summary: project/file-distribution/list
      tags:
        - project
        - file_distribution
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  distributed_files:
                    type: array
                    items:
                      $ref: ./model/DistributedFile.yml
                required:
                  - distributed_files
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/ProjectNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: project/file-distribution/list
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: project_id
          required: true
      description: 指定された企画宛の配布ファイルの一覧を返します。
  /form/get:
    get:
      summary: form/get
      tags:
        - form
        - committee
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  form:
                    $ref: ./model/form/Form.yml
                required:
                  - form
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FormNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: form/get
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: form_id
          required: true
      description: 指定された申請の情報を返します。
  /form/list:
    get:
      summary: form/list
      tags:
        - form
        - committee
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  forms:
                    type: array
                    items:
                      $ref: ./model/form/Form.yml
                required:
                  - forms
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: form/list
      description: 申請一覧を返します。
  /form/create:
    post:
      summary: form/create
      operationId: form/create
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  form:
                    $ref: ./model/form/Form.yml
                required:
                  - form
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 400
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                          info:
                            oneOf:
                              - properties:
                                  type:
                                    type: string
                                    enum:
                                      - INVALID_FIELD
                                  field:
                                    type: string
                                required:
                                  - type
                                  - field
                              - properties:
                                  type:
                                    type: string
                                    enum:
                                      - INVALID_FORM_ITEM
                                      - DUPLICATED_FORM_ITEM_ID
                                  id:
                                    $ref: ./model/form/item/FormItemId.yml
                                required:
                                  - type
                                  - id
                              - properties:
                                  type:
                                    type: string
                                    enum:
                                      - INVALID_FORM_PERIOD
                                required:
                                  - type
                            type: object
                    required:
                      - status
                      - error
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      description: 申請を作成します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                starts_at:
                  $ref: ./model/DateTime.yml
                ends_at:
                  $ref: ./model/DateTime.yml
                items:
                  type: array
                  items:
                    $ref: ./model/form/item/FormItem.yml
                condition:
                  $ref: ./model/form/FormCondition.yml
              required:
                - name
                - description
                - starts_at
                - ends_at
                - items
                - condition
      tags:
        - form
        - committee
  /form/answer/list:
    get:
      summary: form/answer/list
      tags:
        - form
        - form_answer
        - committee
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  answers:
                    type: array
                    items:
                      $ref: ./model/form_answer/FormAnswer.yml
                required:
                  - answers
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FormNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: form/answer/list
      description: 申請の回答一覧を返します。
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: form_id
          required: true
  /form/answer/export:
    get:
      summary: form/answer/export
      tags:
        - form
        - form_answer
        - committee
      responses:
        "200":
          description: OK
          content:
            text/csv:
              schema:
                type: string
                description: カンマ区切り、CRLF 改行の CSV
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FormNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: form/answer/export
      description: 申請の回答一覧を CSV で出力します。
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: form_id
          required: true
          description: 回答一覧を取得する申請の ID を指定します。
        - schema:
            type: string
          in: query
          name: field_id
          description: 与えられた場合、その名前の列で回答の ID を出力します。
        - schema:
            type: string
          in: query
          name: field_created_at
          description: 与えられた場合、その名前の列で回答日時を出力します。
        - schema:
            type: string
          in: query
          name: field_project_id
          description: 与えられた場合、その名前の列で回答した企画の ID を出力します。
        - schema:
            type: string
          in: query
          name: field_author_id
          description: 与えられた場合、その名前の列で回答したユーザーの ID を出力します。
        - schema:
            type: string
          in: query
          name: file_answer_template
          required: true
          description: |
            ファイル回答の表示先 URL の形式を [RFC6570](https://tools.ietf.org/html/rfc6570) の Level 4 template で指定します。
            `answer_id` 変数を回答の ID で、 `sharing_ids` 変数を回答されたファイル共有の ID のリストで展開して CSV に出力します。
  /registration-form/get:
    get:
      summary: registration-form/get
      tags:
        - registration_form
        - committee
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  registration_form:
                    $ref: ./model/registration_form/RegistrationForm.yml
                required:
                  - registration_form
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/RegistrationFormNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: registration-form/get
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: registration_form_id
          required: true
      description: 指定された登録申請の情報を返します。
  /registration-form/list:
    get:
      summary: registration-form/list
      tags:
        - registration_form
        - committee
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  registration_forms:
                    type: array
                    items:
                      $ref: ./model/registration_form/RegistrationForm.yml
                required:
                  - registration_forms
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: registration-form/list
      description: 登録申請一覧を返します。
  /registration-form/create:
    post:
      summary: registration-form/create
      operationId: registration-form/create
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  registration_form:
                    $ref: ./model/registration_form/RegistrationForm.yml
                required:
                  - registration_form
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 400
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                          info:
                            oneOf:
                              - properties:
                                  type:
                                    type: string
                                    enum:
                                      - INVALID_FIELD
                                  field:
                                    type: string
                                required:
                                  - type
                                  - field
                              - properties:
                                  type:
                                    type: string
                                    enum:
                                      - INVALID_FORM_ITEM
                                      - DUPLICATED_FORM_ITEM_ID
                                  id:
                                    $ref: ./model/form/item/FormItemId.yml
                                required:
                                  - type
                                  - id
                            type: object
                    required:
                      - status
                      - error
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      description: 登録申請を作成します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                items:
                  type: array
                  items:
                    $ref: ./model/form/item/FormItem.yml
                query:
                  $ref: ./model/ProjectQuery.yml
              required:
                - name
                - description
                - items
                - query
      tags:
        - registration_form
        - committee
  /registration-form/answer/list:
    get:
      summary: registration-form/answer/list
      tags:
        - registration_form
        - registration_form_answer
        - committee
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  answers:
                    type: array
                    items:
                      $ref: ./model/registration_form_answer/RegistrationFormAnswer.yml
                required:
                  - answers
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/RegistrationFormNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: registration-form/answer/list
      description: 登録申請の回答一覧を返します。
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: registration_form_id
          required: true
  /form-answer/get:
    get:
      summary: form-answer/get
      tags:
        - form_answer
        - committee
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    $ref: ./model/form_answer/FormAnswer.yml
                required:
                  - answer
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FormAnswerNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: form-answer/get
      description: 指定された申請の回答の情報を返します。
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: answer_id
          required: true
    parameters: []
  /file/create:
    post:
      summary: file/create
      operationId: file/create
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: ファイルを作成するのに用いたパートの `name` ディレクティブの引数
                        file:
                          $ref: ./model/file/File.yml
                      required:
                        - name
                        - file
                required:
                  - files
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 400
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                          info:
                            type: object
                            properties:
                              type:
                                type: string
                                enum:
                                  - INVALID_FILE_NAME
                                  - NO_BOUNDARY_IN_CONTENT_TYPE
                                  - NO_NAME_DIRECTIVE_IN_PART
                                  - INVALID_CONTENT_TYPE_IN_PART
                            required:
                              - type
                    required:
                      - status
                      - error
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 409
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - OUT_OF_FILE_USAGE_QUOTA
                    required:
                      - status
                      - error
              examples:
                Out of file usage quota:
                  value:
                    status: 409
                    error:
                      type: API
                      info:
                        type: OUT_OF_FILE_USAGE_QUOTA
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      description: |
        ファイルを作成します。同時に複数のファイルをアップロードできます。
        リクエストボディに含まれる一つのパートにつき一つのファイルを作成します。
        レスポンスには、それぞれのパートの `name` ディレクティブの引数を含めて、作成したファイルの情報の配列が順序不同で返ります
        （ `name` はファイル作成自体には影響しません）。
        また、パートに `filename` ディレクティブが指定された場合、その引数はファイル名としてファイル作成に使用されます。
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              additionalProperties:
                type: string
                format: binary
      tags:
        - file
  /file/get-info:
    get:
      summary: file/get-info
      tags:
        - file
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  file:
                    $ref: ./model/file/File.yml
                required:
                  - file
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: file/get-info
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: file_id
          required: true
      description: 指定されたファイルの情報を返します。
  /file/get:
    get:
      summary: file/get
      tags:
        - file
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: file/get
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: file_id
          required: true
      description: 指定されたファイルを返します。
  /file/share:
    post:
      summary: file/share
      tags:
        - file
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  sharing:
                    $ref: ./model/file_sharing/FileSharing.yml
                required:
                  - sharing
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 409
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                          info:
                            properties:
                              type:
                                type: string
                                enum:
                                  - INVALID_FILE_EXPIRATION_DATE
                            required:
                              - type
                            type: object
                    required:
                      - status
                      - error
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: file/share
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file_id:
                  $ref: ./model/file/FileId.yml
                expires_at:
                  oneOf:
                    - $ref: ./model/DateTime.yml
                    - $ref: ./model/Null.yml
                scope:
                  type: string
                  enum:
                    - committee
                    - committee_operator
                    - public
              required:
                - file_id
                - expires_at
                - scope
      description: 指定されたファイルを共有します。
  /file-sharing/revoke:
    post:
      summary: file-sharing/revoke
      tags:
        - file
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  sharing:
                    $ref: ./model/file_sharing/FileSharing.yml
                required:
                  - sharing
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 409
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                          info:
                            properties:
                              type:
                                type: string
                                enum:
                                  - ALREADY_REVOKED_FILE_SHARING
                                  - EXPIRED_FILE_SHARING
                            required:
                              - type
                            type: object
                    required:
                      - status
                      - error
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileSharingNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: file-sharing/revoke
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sharing_id:
                  $ref: ./model/file_sharing/FileSharingId.yml
              required:
                - sharing_id
      description: 指定されたファイル共有を無効化します。
  /file-sharing/get:
    get:
      summary: file-sharing/get
      tags:
        - file
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  sharing:
                    $ref: ./model/file_sharing/FileSharing.yml
                required:
                  - sharing
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileSharingNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: file-sharing/get
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: sharing_id
          required: true
      description: 指定されたファイル共有の情報を返します。
  /file-sharing/get-file:
    get:
      summary: file-sharing/get-file
      tags:
        - file
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileSharingNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: file-sharing/get-file
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: sharing_id
          required: true
      description: 指定されたファイル共有で共有されているファイルを返します。
  /file-sharing/get-file-info:
    get:
      summary: file-sharing/get-file-info
      tags:
        - file
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  file:
                    $ref: ./model/file/File.yml
                required:
                  - file
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileSharingNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: file-sharing/get-file-info
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: sharing_id
          required: true
      description: 指定されたファイル共有で共有されているファイルの情報を返します。
  /file-sharing/public/get-file:
    get:
      summary: file-sharing/public/get-file
      tags:
        - file
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 403
                      error:
                        oneOf:
                          - properties:
                              type:
                                type: string
                                enum:
                                  - REQUEST
                              id:
                                type: string
                                enum:
                                  - CORS_FORBIDDEN
                            required:
                              - type
                              - id
                          - properties:
                              type:
                                type: string
                                enum:
                                  - API
                              info:
                                type: object
                                required:
                                  - type
                                properties:
                                  type:
                                    type: string
                                    enum:
                                      - INVALID_FILE_SHARING
                            required:
                              - type
                              - info
                        type: object
                    required:
                      - status
                      - error
        "404":
          $ref: "#/components/responses/FileSharingNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: file-sharing/public/get-file
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: sharing_id
          required: true
      description: 指定されたファイル共有で共有されているファイルを認証無しで返します。
      security: []
  /file-sharing/public/get-file-info:
    get:
      summary: file-sharing/public/get-file-info
      tags:
        - file
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  file:
                    $ref: ./model/file/File.yml
                required:
                  - file
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 403
                      error:
                        oneOf:
                          - properties:
                              type:
                                type: string
                                enum:
                                  - REQUEST
                              id:
                                type: string
                                enum:
                                  - CORS_FORBIDDEN
                            required:
                              - type
                              - id
                          - properties:
                              type:
                                type: string
                                enum:
                                  - API
                              info:
                                type: object
                                required:
                                  - type
                                properties:
                                  type:
                                    type: string
                                    enum:
                                      - INVALID_FILE_SHARING
                            required:
                              - type
                              - info
                        type: object
                    required:
                      - status
                      - error
        "404":
          $ref: "#/components/responses/FileSharingNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: file-sharing/public/get-file-info
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: sharing_id
          required: true
      description: 指定されたファイル共有で共有されているファイルの情報を認証無しで返します。
      security: []
  /file-sharing/project/get-file:
    get:
      summary: file-sharing/project/get-file
      tags:
        - file
        - project
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "File Sharing or Project Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 404
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - PROJECT_NOT_FOUND
                                  - FILE_SHARING_NOT_FOUND
                    required:
                      - status
                      - error
              examples:
                Example:
                  value:
                    status: 404
                    error:
                      type: API
                      info:
                        type: FILE_SHARING_NOT_FOUND
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: file-sharing/project/get-file
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: sharing_id
          required: true
        - schema:
            type: string
            format: uuid
          in: query
          name: project_id
          required: true
      description: 指定されたファイル共有で企画に対して共有されているファイルを返します。
  /file-sharing/project/get-file-info:
    get:
      summary: file-sharing/project/get-file-info
      tags:
        - file
        - project
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  file:
                    $ref: ./model/file/File.yml
                required:
                  - file
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "File Sharing or Project Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 404
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - PROJECT_NOT_FOUND
                                  - FILE_SHARING_NOT_FOUND
                    required:
                      - status
                      - error
              examples:
                Example:
                  value:
                    status: 404
                    error:
                      type: API
                      info:
                        type: FILE_SHARING_NOT_FOUND
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: file-sharing/project/get-file-info
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: sharing_id
          required: true
        - schema:
            type: string
            format: uuid
          in: query
          name: project_id
          required: true
      description: 指定されたファイル共有で企画に対して共有されているファイルの情報を返します。
  /file-sharing/form-answer/get-file:
    get:
      summary: file-sharing/form-answer/get-file
      tags:
        - file
        - form_answer
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "File Sharing or Form Answer Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 404
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - FORM_ANSWER_NOT_FOUND
                                  - FILE_SHARING_NOT_FOUND
                    required:
                      - status
                      - error
              examples:
                Example:
                  value:
                    status: 404
                    error:
                      type: API
                      info:
                        type: FILE_SHARING_NOT_FOUND
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: file-sharing/form-answer/get-file
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: sharing_id
          required: true
        - schema:
            type: string
            format: uuid
          in: query
          name: answer_id
          required: true
      description: 指定されたファイル共有で申請の回答に対して共有されているファイルを返します。
  /file-sharing/form-answer/get-file-info:
    get:
      summary: file-sharing/form-answer/get-file-info
      tags:
        - file
        - form_answer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  file:
                    $ref: ./model/file/File.yml
                required:
                  - file
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "File Sharing or Form Answer Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 404
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - FORM_ANSWER_NOT_FOUND
                                  - FILE_SHARING_NOT_FOUND
                    required:
                      - status
                      - error
              examples:
                Example:
                  value:
                    status: 404
                    error:
                      type: API
                      info:
                        type: FILE_SHARING_NOT_FOUND
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: file-sharing/form-answer/get-file-info
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: sharing_id
          required: true
        - schema:
            type: string
            format: uuid
          in: query
          name: answer_id
          required: true
      description: 指定されたファイル共有で申請の回答に対して共有されているファイルの情報を返します。
  /file-distribution/create:
    post:
      summary: file-distribution/create
      tags:
        - file_distribution
        - committee
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  distribution:
                    $ref: ./model/file_distribution/FileDistribution.yml
                required:
                  - distribution
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 400
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                          info:
                            type: object
                            properties:
                              type:
                                type: string
                                enum:
                                  - INVALID_FIELD
                              field:
                                type: string
                            required:
                              - type
                              - field
                    required:
                      - status
                      - error
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "File Sharing, File, or Project Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 404
                      error:
                        type: object
                        required:
                          - type
                          - info
                        properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - FILE_NOT_FOUND
                                  - FILE_SHARING_NOT_FOUND
                                  - PROJECT_NOT_FOUND
                    required:
                      - status
                      - error
              examples:
                Example:
                  value:
                    status: 404
                    error:
                      type: API
                      info:
                        type: FILE_SHARING_NOT_FOUND
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: file-distribution/create
      description: ファイルを企画に配布します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                files:
                  type: array
                  items:
                    type: object
                    oneOf:
                      - properties:
                          project_id:
                            $ref: ./model/project/ProjectId.yml
                          sharing_id:
                            $ref: ./model/file_sharing/FileSharingId.yml
                        required:
                          - project_id
                          - sharing_id
                      - properties:
                          project_id:
                            $ref: ./model/project/ProjectId.yml
                          file_id:
                            $ref: ./model/file/FileId.yml
                        required:
                          - project_id
                          - file_id
              required:
                - name
                - description
                - files
  /file-distribution/get:
    get:
      summary: file-distribution/get
      tags:
        - file_distribution
        - committee
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  distribution:
                    $ref: ./model/file_distribution/FileDistribution.yml
                required:
                  - distribution
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/FileDistributionNotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: file-distribution/get
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: distribution_id
          required: true
      description: 指定されたファイル配布の情報を返します。
  /file-distribution/list:
    get:
      summary: file-distribution/list
      tags:
        - file_distribution
        - committee
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  distributions:
                    type: array
                    items:
                      $ref: ./model/file_distribution/FileDistribution.yml
                required:
                  - distributions
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: file-distribution/list
      parameters: []
      description: ファイル配布の一覧を返します。
  /meta/health/check:
    get:
      summary: meta/health/check
      tags:
        - meta
      responses:
        "200":
          description: OK
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                allOf:
                  - $ref: ./model/error/Error.yml
                  - type: object
                    properties:
                      status:
                        type: integer
                        enum:
                          - 503
                      error:
                        required:
                          - type
                        type: object
                        properties:
                          type:
                            type: string
                            enum:
                              - SERVICE_UNAVAILABLE
                    required:
                      - status
                      - error
        "403":
          $ref: "#/components/responses/CorsForbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: meta/health/check
      description: サービスの状態を確認します。
      security: []
  /meta/health/check-liveness:
    get:
      summary: meta/health/check-liveness
      tags:
        - meta
      responses:
        "200":
          description: OK
        "403":
          $ref: "#/components/responses/CorsForbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: meta/health/check-liveness
      description: 何もしません。サーバーの稼働の確認に使います。
      security: []
  /meta/get-build-info:
    get:
      summary: meta/get-build-info
      tags:
        - meta
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  profile:
                    type: string
                  out:
                    type: string
                    nullable: true
                  git:
                    type: object
                    properties:
                      commit:
                        type: string
                      version:
                        type: string
                      branch:
                        type: string
                    required:
                      - commit
                      - version
                      - branch
                required:
                  - version
                  - profile
                  - out
        "403":
          $ref: "#/components/responses/CorsForbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: meta/get-build-info
      description: ビルド時の情報を取得します。
      security: []
components:
  securitySchemes:
    token:
      type: http
      scheme: bearer
      description: "Firebase Authentication が返す `idToken` を渡してください。"
  responses:
    ProjectNotFound:
      description: Project Not Found
      content:
        application/json:
          schema:
            allOf:
              - $ref: ./model/error/Error.yml
              - type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 404
                  error:
                    type: object
                    required:
                      - type
                      - info
                    properties:
                      type:
                        type: string
                        enum:
                          - API
                      info:
                        type: object
                        required:
                          - type
                        properties:
                          type:
                            type: string
                            enum:
                              - PROJECT_NOT_FOUND
                required:
                  - status
                  - error
          examples:
            Example:
              value:
                status: 404
                error:
                  type: API
                  info:
                    type: PROJECT_NOT_FOUND
    FormNotFound:
      description: Form Not Found
      content:
        application/json:
          schema:
            allOf:
              - $ref: ./model/error/Error.yml
              - type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 404
                  error:
                    type: object
                    required:
                      - type
                      - info
                    properties:
                      type:
                        type: string
                        enum:
                          - API
                      info:
                        type: object
                        required:
                          - type
                        properties:
                          type:
                            type: string
                            enum:
                              - FORM_NOT_FOUND
                required:
                  - status
                  - error
          examples:
            Example:
              value:
                status: 404
                error:
                  type: API
                  info:
                    type: FORM_NOT_FOUND
    RegistrationFormNotFound:
      description: Registration Form Not Found
      content:
        application/json:
          schema:
            allOf:
              - $ref: ./model/error/Error.yml
              - type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 404
                  error:
                    type: object
                    required:
                      - type
                      - info
                    properties:
                      type:
                        type: string
                        enum:
                          - API
                      info:
                        type: object
                        required:
                          - type
                        properties:
                          type:
                            type: string
                            enum:
                              - REGISTRATION_FORM_NOT_FOUND
                required:
                  - status
                  - error
          examples:
            Example:
              value:
                status: 404
                error:
                  type: API
                  info:
                    type: REGISTRATION_FORM_NOT_FOUND
    UserNotFound:
      description: User Not Found
      content:
        application/json:
          schema:
            allOf:
              - $ref: ./model/error/Error.yml
              - type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 404
                  error:
                    type: object
                    required:
                      - type
                      - info
                    properties:
                      type:
                        type: string
                        enum:
                          - API
                      info:
                        type: object
                        required:
                          - type
                        properties:
                          type:
                            type: string
                            enum:
                              - USER_NOT_FOUND
                required:
                  - status
                  - error
          examples:
            Example:
              value:
                status: 404
                error:
                  type: API
                  info:
                    type: USER_NOT_FOUND
    FormAnswerNotFound:
      description: Form Answer Not Found
      content:
        application/json:
          schema:
            allOf:
              - $ref: ./model/error/Error.yml
              - type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 404
                  error:
                    type: object
                    required:
                      - type
                      - info
                    properties:
                      type:
                        type: string
                        enum:
                          - API
                      info:
                        type: object
                        required:
                          - type
                        properties:
                          type:
                            type: string
                            enum:
                              - FORM_ANSWER_NOT_FOUND
                required:
                  - status
                  - error
          examples:
            Example:
              value:
                status: 404
                error:
                  type: API
                  info:
                    type: FORM_ANSWER_NOT_FOUND
    FileNotFound:
      description: File Not Found
      content:
        application/json:
          schema:
            allOf:
              - $ref: ./model/error/Error.yml
              - type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 404
                  error:
                    type: object
                    required:
                      - type
                      - info
                    properties:
                      type:
                        type: string
                        enum:
                          - API
                      info:
                        type: object
                        required:
                          - type
                        properties:
                          type:
                            type: string
                            enum:
                              - FILE_NOT_FOUND
                required:
                  - status
                  - error
          examples:
            Example:
              value:
                status: 404
                error:
                  type: API
                  info:
                    type: FILE_NOT_FOUND
    FileSharingNotFound:
      description: File Sharing Not Found
      content:
        application/json:
          schema:
            allOf:
              - $ref: ./model/error/Error.yml
              - type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 404
                  error:
                    type: object
                    required:
                      - type
                      - info
                    properties:
                      type:
                        type: string
                        enum:
                          - API
                      info:
                        type: object
                        required:
                          - type
                        properties:
                          type:
                            type: string
                            enum:
                              - FILE_SHARING_NOT_FOUND
                required:
                  - status
                  - error
          examples:
            Example:
              value:
                status: 404
                error:
                  type: API
                  info:
                    type: FILE_SHARING_NOT_FOUND
    FileDistributionNotFound:
      description: File Distribution Not Found
      content:
        application/json:
          schema:
            allOf:
              - $ref: ./model/error/Error.yml
              - type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 404
                  error:
                    type: object
                    required:
                      - type
                      - info
                    properties:
                      type:
                        type: string
                        enum:
                          - API
                      info:
                        type: object
                        required:
                          - type
                        properties:
                          type:
                            type: string
                            enum:
                              - FILE_DISTRIBUTION_NOT_FOUND
                required:
                  - status
                  - error
          examples:
            Example:
              value:
                status: 404
                error:
                  type: API
                  info:
                    type: FILE_DISTRIBUTION_NOT_FOUND
    PendingProjectNotFound:
      description: Pending Project Not Found
      content:
        application/json:
          schema:
            allOf:
              - $ref: ./model/error/Error.yml
              - type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 404
                  error:
                    type: object
                    required:
                      - type
                      - info
                    properties:
                      type:
                        type: string
                        enum:
                          - API
                      info:
                        type: object
                        required:
                          - type
                        properties:
                          type:
                            type: string
                            enum:
                              - PENDING_PROJECT_NOT_FOUND
                required:
                  - status
                  - error
          examples:
            Example:
              value:
                status: 404
                error:
                  type: API
                  info:
                    type: PENDING_PROJECT_NOT_FOUND
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            allOf:
              - $ref: ./model/error/Error.yml
              - type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 500
                  error:
                    required:
                      - type
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - INTERNAL
                required:
                  - status
                  - error
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            allOf:
              - $ref: ./model/error/Error.yml
              - type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 401
                  error:
                    type: object
                    required:
                      - type
                      - id
                    properties:
                      type:
                        type: string
                        enum:
                          - AUTHENTICATION
                      id:
                        type: string
                        enum:
                          - UNAUTHORIZED
                          - INVALID_TOKEN
                required:
                  - status
                  - error
          examples:
            Example:
              value:
                status: 401
                error:
                  type: AUTHENTICATION
                  id: INVALID_TOKEN
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            allOf:
              - $ref: ./model/error/Error.yml
              - type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 403
                  error:
                    oneOf:
                      - properties:
                          type:
                            type: string
                            enum:
                              - AUTHENTICATION
                          id:
                            type: string
                            enum:
                              - NOT_UNIVERSITY_EMAIL_ADDRESS
                              - UNVERIFIED_EMAIL_ADDRESS
                        required:
                          - type
                          - id
                      - properties:
                          type:
                            type: string
                            enum:
                              - NOT_SIGNED_UP
                        required:
                          - type
                      - properties:
                          type:
                            type: string
                            enum:
                              - REQUEST
                          id:
                            type: string
                            enum:
                              - CORS_FORBIDDEN
                        required:
                          - type
                          - id
                      - properties:
                          type:
                            type: string
                            enum:
                              - API
                          info:
                            type: object
                            required:
                              - type
                            properties:
                              type:
                                type: string
                                enum:
                                  - INSUFFICIENT_PERMISSIONS
                                  - NON_SHARABLE_FILE
                                  - OUT_OF_SCOPE_FILE_SHARING
                                  - INVALID_FILE_SHARING
                        required:
                          - type
                          - info
                    type: object
                required:
                  - status
                  - error
          examples:
            Unverified email address:
              value:
                status: 403
                error:
                  type: AUTHENTICATION
                  id: UNVERIFIED_EMAIL_ADDRESS
            Not signed up:
              value:
                status: 403
                error:
                  type: NOT_SIGNED_UP
            Insufficient permissions:
              value:
                status: 403
                error:
                  type: API
                  info:
                    type: INSUFFICIENT_PERMISSIONS
    CorsForbidden:
      description: Forbidden Cross-Origin Request
      content:
        application/json:
          schema:
            allOf:
              - $ref: ./model/error/Error.yml
              - type: object
                properties:
                  status:
                    type: integer
                    enum:
                      - 403
                  error:
                    type: object
                    properties:
                      type:
                        type: string
                        enum:
                          - REQUEST
                      id:
                        type: string
                        enum:
                          - CORS_FORBIDDEN
                    required:
                      - type
                      - id
                required:
                  - status
                  - error
tags:
  - name: me
  - name: user
  - name: project
  - name: pending_project
  - name: form
  - name: form_answer
  - name: registration_form
  - name: registration_form_answer
  - name: file
  - name: committee
  - name: admin
  - name: meta
  - name: file_distribution
security:
  - token: []
